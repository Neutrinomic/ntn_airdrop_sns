{"cells":[{"kind":2,"language":"javascript","value":"let can = await ic(\"66xzk-cqaaa-aaaal-qdfoa-cai\");\n\n\nglobal({can});\n"},{"kind":2,"language":"javascript","value":"let blacklist = [\n    \"3ejs3-eaaaa-aaaag-qbl2a-cai\",\n    \"yv4mw-giaaa-aaaag-qcqjq-cai\",\n    \"nx2w3-maaaa-aaaag-qcaqq-cai\",\n    \"ob7gr-mqaaa-aaaag-qclja-cai\",\n    \"p4xq4-gyaaa-aaaag-qchbq-cai\",\n    \"32fn4-qqaaa-aaaak-ad65a-cai\",\n    \"3xwpq-ziaaa-aaaah-qcn4a-cai\"\n    ];\n\nawait can.set_blacklisted(blacklist);\nawait can.get_blacklisted().then(log);\n"},{"kind":2,"language":"javascript","value":"function parseCSVLine(line) {\n    // Regular expression to match either quoted fields or unquoted fields\n    const regex = /(\".*?\"|[^\",]+)(?=\\s*,|\\s*$)/g;\n    \n    // Get all matches\n    let matches = line.match(regex);\n    \n    // Check if there are matches; if not, return an empty array\n    if (!matches) return [];\n    \n    // Process matches to handle quoted strings and return the resulting array\n    return matches.map(field => {\n      // If the field is quoted, remove the quotes\n      if (field.startsWith('\"') && field.endsWith('\"')) {\n        return field.substring(1, field.length - 1);\n      }\n      // Return the field without modification if not quoted\n      return field;\n    });\n  }\n\nfunction ps(t) {\n    if (t == \"\") return null;\n     return t.split(\",\").map(x => parseInt(x.trim(),10));\n}\n\nlet dropsCSV = await readFileText(\"drop_targets.csv\");\nlet drops = dropsCSV.split(\"\\n\").map(x => parseCSVLine(x).map(x => x.trim())).map( ([a,b,c]) => ([a, ps(b.replaceAll('\"','')), parseInt(c, 10)]));\ndrops = drops.map( ([a,b,c]) => ([c,a,b]));\n\nawait can.import_drop_targets(drops);"},{"kind":2,"language":"javascript","value":"await can.export_drop_targets().then(log);"},{"kind":2,"language":"javascript","value":"log(me)"},{"kind":2,"language":"javascript","value":"await can.get_amounts().then(log); // With 1,7806 NTN sent we will test the drop targets. Each receives 0.0001 NTN"},{"kind":2,"language":"javascript","value":"await can.getInfo().then(log);"},{"kind":2,"language":"javascript","value":"await can.start().then(log)"},{"kind":2,"language":"javascript","value":"await can.getErrors().then(log)"},{"kind":2,"language":"javascript","value":"await can.giveback().then(log)"}]}